// Targeted by JavaCPP version 1.5.9-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.pytorch;

import org.bytedeco.pytorch.Allocator;
import org.bytedeco.pytorch.Function;
import org.bytedeco.pytorch.Module;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;

import static org.bytedeco.pytorch.global.torch.*;


@Name("c10::OptionalArrayRef<c10::SymInt>") @NoOffset @Properties(inherit = org.bytedeco.pytorch.presets.torch.class)
public class OptionalSymIntArrayRef extends Pointer {
    static { Loader.load(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public OptionalSymIntArrayRef(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public OptionalSymIntArrayRef position(long position) {
        return (OptionalSymIntArrayRef)super.position(position);
    }
    @Override public OptionalSymIntArrayRef getPointer(long i) {
        return new OptionalSymIntArrayRef((Pointer)this).offsetAddress(i);
    }

  // Constructors

  public OptionalSymIntArrayRef() { super((Pointer)null); allocate(); }
  @NoException(true) private native void allocate();

  public OptionalSymIntArrayRef(@ByVal @Cast("c10::nullopt_t*") Pointer arg0) { super((Pointer)null); allocate(arg0); }
  @NoException(true) private native void allocate(@ByVal @Cast("c10::nullopt_t*") Pointer arg0);

  public OptionalSymIntArrayRef(@Const @ByRef OptionalSymIntArrayRef other) { super((Pointer)null); allocate(other); }
  private native void allocate(@Const @ByRef OptionalSymIntArrayRef other);

  public OptionalSymIntArrayRef(@Const @ByRef SymIntArrayRefOptional other) { super((Pointer)null); allocate(other); }
  @NoException(true) private native void allocate(@Const @ByRef SymIntArrayRefOptional other);

  public OptionalSymIntArrayRef(@Const @ByRef SymInt value) { super((Pointer)null); allocate(value); }
  @NoException(true) private native void allocate(@Const @ByRef SymInt value);

  // Destructor

  // Assignment

  public native @Const @ByRef @Name("operator =") @NoException(true) OptionalSymIntArrayRef put(@ByVal @Cast("c10::nullopt_t*") Pointer arg0);

  public native @ByRef @Name("operator =") OptionalSymIntArrayRef put(@Const @ByRef OptionalSymIntArrayRef other);

  public native @Const @ByRef @Name("operator =") @NoException(true) OptionalSymIntArrayRef put(
        @Const @ByRef SymIntArrayRefOptional other);

  // Observers

  public native @Const @Name("operator ->") @NoException(true) SymIntRef access();

  public native @Const @ByRef @Name("operator *") @NoException(true) SymIntRef multiply();

  

  public native @Cast("bool") @Name("operator bool") @NoException(true) boolean asBoolean();

  public native @Cast("const bool") @NoException(true) boolean has_value();

  public native @Const @ByRef SymIntRef value();

  

  

  // Modifiers

  public native @NoException(true) void swap(@ByRef OptionalSymIntArrayRef other);

  public native @NoException(true) void reset();
}
